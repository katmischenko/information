# Иногда бывает нужно прервать выполнение цикла преждевременно. Оператор break прерывает ближайший цикл for или while.
# Усовершенствуем программу, проверяющую число на простоту, с помощью оператора break:
# Напишем программу, определяющую, что число является простым:

num = int(input())
flag = True

for i in range(2, num):
 if num % i == 0:  # если исходное число делится на какое-либо отличное от 1 и самого себя
  flag = False
  break  # останавливаем цикл если встретили делитель числа

if flag:  # эквивалентно if flag == True:
 print('Число простое')
else:
 print('Число составное')

# Как только мы встречаем делитель отличный от 1 и num, мы меняем значение сигнальной метки и прерываем цикл,
# поскольку дальнейшее его выполнение лишено смысла: число гарантированно не является простым.

# Напишем программу, использующую цикл for, которая считывает 10 чисел и суммирует их до тех пор,
# пока не обнаружит отрицательное число. В этом случае выполнение цикла прерывается командой break:

result = 0
for i in range(10):
 num = int(input())
 if num < 0:
  break
 result += num
print(result)

# Оператор прерывания цикла break удобен в связке с сигнальными метками: когда после проверки некоторого условия нам нет смысла продолжать выполнение цикла.

# Напишем программу, которая определяет, содержит ли введенное пользователем число цифру 7.

num = int(input())
number = num
flag = False
while num != 0:
 last_digit = num % 10
 if last_digit == 7:
  flag = True
  break  # прерываем цикл, так как число гарантированно содержит цифру 7
 num //= 10

if flag:  # эквивалентно if flag == True:
 print('Число', number, 'содержит цифру 7')
else:
 print('Число', number, 'не содержит цифру 7')
# Как только мы встретили цифру 7, мы меняем значение сигнальной метки и прерываем цикл с помощью оператора break.
# Мы можем и не прерывать цикл преждевременно, а дождаться его естественного завершения (условие num != 0,
# то есть все цифры числа обработаны), однако в таком случае мы будем совершать лишнюю работу, и в случае,
# если число очень большое, программа будет работать медленнее.


